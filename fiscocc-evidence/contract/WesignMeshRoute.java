package org.bcos.evidence.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.fisco.bcos.channel.client.TransactionSucCallback;
import org.fisco.bcos.web3j.abi.EventEncoder;
import org.fisco.bcos.web3j.abi.TypeReference;
import org.fisco.bcos.web3j.abi.datatypes.Address;
import org.fisco.bcos.web3j.abi.datatypes.DynamicArray;
import org.fisco.bcos.web3j.abi.datatypes.Event;
import org.fisco.bcos.web3j.abi.datatypes.Function;
import org.fisco.bcos.web3j.abi.datatypes.Type;
import org.fisco.bcos.web3j.abi.datatypes.Utf8String;
import org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.web3j.abi.datatypes.generated.Int256;
import org.fisco.bcos.web3j.abi.datatypes.generated.Uint256;
import org.fisco.bcos.web3j.crypto.Credentials;
import org.fisco.bcos.web3j.protocol.Web3j;
import org.fisco.bcos.web3j.protocol.core.DefaultBlockParameter;
import org.fisco.bcos.web3j.protocol.core.RemoteCall;
import org.fisco.bcos.web3j.protocol.core.methods.request.BcosFilter;
import org.fisco.bcos.web3j.protocol.core.methods.response.Log;
import org.fisco.bcos.web3j.protocol.core.methods.response.TransactionReceipt;
import org.fisco.bcos.web3j.tuples.generated.Tuple2;
import org.fisco.bcos.web3j.tuples.generated.Tuple3;
import org.fisco.bcos.web3j.tuples.generated.Tuple4;
import org.fisco.bcos.web3j.tx.Contract;
import org.fisco.bcos.web3j.tx.TransactionManager;
import org.fisco.bcos.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.fisco.bcos.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version none.
 */
public class WesignMeshRoute extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50612dc7806100206000396000f3006080604052600436106100db576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806308a6f79f146100e057806313dab0291461018c5780631da6739e146102ea5780633b4b166d146103675780634c36a0d71461048b57806350c946fe146104e2578063649970b614610545578063711a861f146105b6578063768fa9501461063c5780639dc0dfd914610685578063bbdc044f146106dc578063c11d00531461074b578063d2e87f111461083c578063dd7ed795146108ab578063e50f4dfb14610987575b600080fd5b3480156100ec57600080fd5b50610172600480360381019080803560001916906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109de565b604051808215151515815260200191505060405180910390f35b34801561019857600080fd5b506101bb6004803603810190808035600019169060200190929190505050610b9c565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561020a5780820151818401526020810190506101ef565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561024c578082015181840152602081019050610231565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561028e578082015181840152602081019050610273565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156102d05780820151818401526020810190506102b5565b505050509050019850505050505050505060405180910390f35b3480156102f657600080fd5b5061034d600480360381019080803560001916906020019092919080356000191690602001909291908035600019169060200190929190803590602001909291908035600019169060200190929190505050610f8c565b604051808215151515815260200191505060405180910390f35b34801561037357600080fd5b506103a4600480360381019080803560001916906020019092919080356000191690602001909291905050506113bf565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156103ef5780820151818401526020810190506103d4565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015610431578082015181840152602081019050610416565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610473578082015181840152602081019050610458565b50505050905001965050505050505060405180910390f35b34801561049757600080fd5b506104c86004803603810190808035600019169060200190929190803560001916906020019092919050505061182d565b604051808215151515815260200191505060405180910390f35b3480156104ee57600080fd5b506105116004803603810190808035600019169060200190929190505050611bad565b6040518084600019166000191681526020018381526020018260001916600019168152602001935050505060405180910390f35b34801561055157600080fd5b506105746004803603810190808035600019169060200190929190505050611bed565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105c257600080fd5b506105e56004803603810190808035600019169060200190929190505050611c35565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561062857808201518184015260208101905061060d565b505050509050019250505060405180910390f35b34801561064857600080fd5b5061066b6004803603810190808035600019169060200190929190505050611cb5565b604051808215151515815260200191505060405180910390f35b34801561069157600080fd5b506106be600480360381019080803560001916906020019092919080359060200190929190505050611d95565b60405180826000191660001916815260200191505060405180910390f35b3480156106e857600080fd5b5061073160048036038101908080356000191690602001909291908035600019169060200190929190803590602001909291908035600019169060200190929190505050611e77565b604051808215151515815260200191505060405180910390f35b34801561075757600080fd5b506108226004803603810190808035600019169060200190929190803560001916906020019092919080359060200190929190803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611ff0565b604051808215151515815260200191505060405180910390f35b34801561084857600080fd5b5061089160048036038101908080356000191690602001909291908035600019169060200190929190803590602001909291908035600019169060200190929190505050612386565b604051808215151515815260200191505060405180910390f35b3480156108b757600080fd5b506108e8600480360381019080803560001916906020019092919080356000191690602001909291905050506124fa565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561092f578082015181840152602081019050610914565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610971578082015181840152602081019050610956565b5050505090500194505050505060405180910390f35b34801561099357600080fd5b506109c460048036038101908080356000191690602001909291908035600019169060200190929190505050612670565b604051808215151515815260200191505060405180910390f35b60006109e86129bf565b6000600160008760001916600019168152602001908152602001600020600001541115610a6d577f5cef6f60ac009b300ee2bc1369eff45fe1457a05d93790768ce76f0c0b05fb7c600160008760001916600019168152602001908152602001600020600001546040518082815260200191505060405180910390a160019150610b94565b6001600454016004819055506080604051908101604052806004548152602001866000191681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1681525090508060016000876000191660001916815260200190815260200160002060008201518160000155602082015181600101906000191690556040820151816002019080519060200190610b0b929190612a01565b5060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f5cef6f60ac009b300ee2bc1369eff45fe1457a05d93790768ce76f0c0b05fb7c6004546040518082815260200191505060405180910390a1600191505b509392505050565b60608060608060608060608060008060008060008d6000191660001916815260200190815260200160002080549050604051908082528060200260200182016040528015610bf95781602001602082028038833980820191505090505b5096506000808d6000191660001916815260200190815260200160002080549050604051908082528060200260200182016040528015610c485781602001602082028038833980820191505090505b5095506000808d6000191660001916815260200190815260200160002080549050604051908082528060200260200182016040528015610c975781602001602082028038833980820191505090505b5094506000808d60001916600019168152602001908152602001600020805490506004546000808f60001916600019168152602001908152602001600020805490500201604051908082528060200260200182016040528015610d095781602001602082028038833980820191505090505b50935060009250600091505b6000808d6000191660001916815260200190815260200160002080549050821015610f72576000808d6000191660001916815260200190815260200160002082815481101515610d6157fe5b9060005260206000209060060201600101548783815181101515610d8157fe5b9060200190602002019060001916908160001916815250506000808d6000191660001916815260200190815260200160002082815481101515610dc057fe5b9060005260206000209060060201600201548683815181101515610de057fe5b90602001906020020181815250506000808d6000191660001916815260200190815260200160002082815481101515610e1557fe5b9060005260206000209060060201600301548583815181101515610e3557fe5b9060200190602002018181525050600090505b6000808d6000191660001916815260200190815260200160002082815481101515610e6f57fe5b906000526020600020906006020160050180549050811015610f16576000808d6000191660001916815260200190815260200160002082815481101515610eb257fe5b906000526020600020906006020160050181815481101515610ed057fe5b90600052602060002001548484815181101515610ee957fe5b90602001906020020190600019169081600019168152505082806001019350508080600101915050610e48565b7f7c000000000000000000000000000000000000000000000000000000000000008484815181101515610f4557fe5b90602001906020020190600019169081600019168152505082806001019350508180600101925050610d15565b868686869a509a509a509a50505050505050509193509193565b6000610f96612a54565b600080600060606000600160008d6000191660001916815260200190815260200160002060000154111515611025577f094cfef5923da2539ec14b9b16c23a483198e2d1d8580ae2637e675f19410a887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518082815260200191505060405180910390a1600095506113b1565b6000600260008c600019166000191681526020019081526020016000206000015414156110f45760016005540160058190555060a06040519081016040528060055481526020018b6000191681526020018a6000191681526020018981526020018860001916815250945084600260008c6000191660001916815260200190815260200160002060008201518160000155602082015181600101906000191690556040820151816002019060001916905560608201518160030155608082015181600401906000191690559050505b600160008c60001916600019168152602001908152602001600020935060009250600091505b836002018054905082101561116a578960001916846002018381548110151561113f57fe5b906000526020600020015460001916141561115d576001925061116a565b818060010192505061111a565b6000151583151514156113555760018460020180549050016040519080825280602002602001820160405280156111b05781602001602082028038833980820191505090505b509050600091505b83600201805490508210156112165783600201828154811015156111d857fe5b906000526020600020015481838151811015156111f157fe5b90602001906020020190600019169081600019168152505081806001019250506111b8565b8981856002018054905081518110151561122c57fe5b9060200190602002019060001916908160001916815250508084600201908051906020019061125c929190612a8d565b5083600160008d60001916600019168152602001908152602001600020600082015481600001556001820154816001019060001916905560028201816002019080546112a9929190612ae0565b506003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f094cfef5923da2539ec14b9b16c23a483198e2d1d8580ae2637e675f19410a8860006040518082815260200191505060405180910390a1600195506113b1565b7f094cfef5923da2539ec14b9b16c23a483198e2d1d8580ae2637e675f19410a887ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6040518082815260200191505060405180910390a1600095505b505050505095945050505050565b6060806060806060806000806000806000806000808f600019166000191681526020019081526020016000208054905060045460055402026040519080825280602002602001820160405280156114255781602001602082028038833980820191505090505b5098506000808f6000191660001916815260200190815260200160002080549050600454600554020260405190808252806020026020018201604052801561147c5781602001602082028038833980820191505090505b5097506000808f600019166000191681526020019081526020016000208054905060045460055402026040519080825280602002602001820160405280156114d35781602001602082028038833980820191505090505b50965060009550600094505b6000808f6000191660001916815260200190815260200160002080549050851015611814576000808f600019166000191681526020019081526020016000208581548110151561152b57fe5b9060005260206000209060060201600501935083805490509250600091505b8282101561180757600090505b60016000858481548110151561156957fe5b906000526020600020015460001916600019168152602001908152602001600020600201805490508110156117fa5783828154811015156115a657fe5b906000526020600020015487878151811015156115bf57fe5b9060200190602002019060001916908160001916815250506000600260006001600088878154811015156115ef57fe5b9060005260206000200154600019166000191681526020019081526020016000206002018481548110151561162057fe5b906000526020600020015460001916600019168152602001908152602001600020600401546000191614806116c757508c600019166002600060016000888781548110151561166b57fe5b9060005260206000200154600019166000191681526020019081526020016000206002018481548110151561169c57fe5b9060005260206000200154600019166000191681526020019081526020016000206004015460001916145b156117ed57600260006001600087868154811015156116e257fe5b9060005260206000200154600019166000191681526020019081526020016000206002018381548110151561171357fe5b90600052602060002001546000191660001916815260200190815260200160002060020154898781518110151561174657fe5b9060200190602002019060001916908160001916815250506002600060016000878681548110151561177457fe5b906000526020600020015460001916600019168152602001908152602001600020600201838154811015156117a557fe5b9060005260206000200154600019166000191681526020019081526020016000206003015488878151811015156117d857fe5b90602001906020020181815250506001860195505b8080600101915050611557565b818060010192505061154a565b84806001019550506114df565b8888889b509b509b505050505050505050509250925092565b600080600080600080600260008860001916600019168152602001908152602001600020600001541115156118bc577fefb0e04bd0e5b3d1e9e8986cc52f9d1e11e9a7068c0ff9ddedd93a178e242cb17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518082815260200191505060405180910390a160009450611ba3565b600060016000896000191660001916815260200190815260200160002060000154111515611944577fefb0e04bd0e5b3d1e9e8986cc52f9d1e11e9a7068c0ff9ddedd93a178e242cb17ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6040518082815260200191505060405180910390a160009450611ba3565b600160008860001916600019168152602001908152602001600020935083600201925060018380549050019150600090505b82805490508110156119bf578560001916838281548110151561199557fe5b90600052602060002001546000191614156119b2578091506119bf565b8080600101915050611976565b8280549050821115611a2b577fefb0e04bd0e5b3d1e9e8986cc52f9d1e11e9a7068c0ff9ddedd93a178e242cb17ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6040518082815260200191505060405180910390a160009450611ba3565b8190505b6001838054905003811015611a87578260018201815481101515611a4f57fe5b90600052602060002001548382815481101515611a6857fe5b9060005260206000200181600019169055508080600101915050611a2f565b828054600190039081611a9a9190612b32565b508284600201908054611aae929190612b5e565b508360016000896000191660001916815260200190815260200160002060008201548160000155600182015481600101906000191690556002820181600201908054611afb929190612ae0565b506003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fefb0e04bd0e5b3d1e9e8986cc52f9d1e11e9a7068c0ff9ddedd93a178e242cb160006040518082815260200191505060405180910390a1600194505b5050505092915050565b6000806000806002600086600019166000191681526020019081526020016000209050806002015481600301548260040154935093509350509193909250565b600060016000836000191660001916815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60606000600160008460001916600019168152602001908152602001600020905080600201805480602002602001604051908101604052809291908181526020018280548015611ca857602002820191906000526020600020905b81546000191681526020019060010190808311611c90575b5050505050915050919050565b6000611cbf612bb0565b6000600360008560001916600019168152602001908152602001600020600001541115611cef5760019150611d8f565b60016006540160068190555060408051908101604052806006548152602001846000191681525090508060036000856000191660001916815260200190815260200160002060008201518160000155602082015181600101906000191690559050507f620d4dbe5437eedfb0af1640d4d4bbf3f2099941c858a2544346da7922f7e6a96006546040518082815260200191505060405180910390a1600191505b50919050565b60008060008060008060008060008060008c60001916600019168152602001908152602001600020975087805490509650600095505b86861015611e65578786815481101515611de157fe5b9060005260206000209060060201945084600201548a10158015611e09575084600301548a11155b15611e585784600501935060008480549050141515611e575783805490508a811515611e3157fe5b0692508383815481101515611e4257fe5b90600052602060002001549150819850611e69565b5b8580600101965050611dcb565b8098505b505050505050505092915050565b6000611e81612a54565b6000600260008860001916600019168152602001908152602001600020600001541115611f06577f5d5c3e47855d5062e552e9d3248aa3353345a1704d47cf0a7769ccd6f8ac4d45600260008860001916600019168152602001908152602001600020600001546040518082815260200191505060405180910390a160019150611fe7565b60016005540160058190555060a06040519081016040528060055481526020018760001916815260200186600019168152602001858152602001846000191681525090507f5d5c3e47855d5062e552e9d3248aa3353345a1704d47cf0a7769ccd6f8ac4d456005546040518082815260200191505060405180910390a18060026000886000191660001916815260200190815260200160002060008201518160000155602082015181600101906000191690556040820151816002019060001916905560608201518160030155608082015181600401906000191690559050505b50949350505050565b600080611ffb612bcd565b600091505b6000808a60001916600019168152602001908152602001600020805490508210156120da576000808a600019166000191681526020019081526020016000208281548110151561204c57fe5b90600052602060002090600602016001015460001916886000191614156120cd577f4543d6af6484827e0328e1cd58529ce84a8b2faf1572d3446492135e3aaff5167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518082815260200191505060405180910390a16000925061237a565b8180600101925050612000565b600091505b84518210156121945760006003600087858151811015156120fc57fe5b906020019060200201516000191660001916815260200190815260200160002060000154111515612187577f4543d6af6484827e0328e1cd58529ce84a8b2faf1572d3446492135e3aaff5167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6040518082815260200191505060405180910390a16000925061237a565b81806001019250506120df565b600091505b835182101561224e5760006001600086858151811015156121b657fe5b906020019060200201516000191660001916815260200190815260200160002060000154111515612241577f4543d6af6484827e0328e1cd58529ce84a8b2faf1572d3446492135e3aaff5167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6040518082815260200191505060405180910390a16000925061237a565b8180600101925050612199565b60c0604051908101604052808a600019168152602001896000191681526020018881526020018781526020018681526020018581525090506000808a60001916600019168152602001908152602001600020819080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000190600019169055602082015181600101906000191690556040820151816002015560608201518160030155608082015181600401908051906020019061231c929190612a01565b5060a0820151816005019080519060200190612339929190612a01565b505050507f4543d6af6484827e0328e1cd58529ce84a8b2faf1572d3446492135e3aaff51660006040518082815260200191505060405180910390a1600192505b50509695505050505050565b600080600060026000886000191660001916815260200190815260200160002060000154111515612411577f25918b2396203c312e3a0c1d5ccf17f40658477398147ee559929d9f34474b857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518082815260200191505060405180910390a1600091506124f1565b600260008760001916600019168152602001908152602001600020905084816002018160001916905550838160030181905550828160040181600019169055508060026000886000191660001916815260200190815260200160002060008201548160000155600182015481600101906000191690556002820154816002019060001916905560038201548160030155600482015481600401906000191690559050507f25918b2396203c312e3a0c1d5ccf17f40658477398147ee559929d9f34474b8560006040518082815260200191505060405180910390a1600191505b50949350505050565b6060806000806060806000806000600160008c600019166000191681526020019081526020016000209650866002018054905095508560405190808252806020026020018201604052801561255e5781602001602082028038833980820191505090505b509450856040519080825280602002602001820160405280156125905781602001602082028038833980820191505090505b509350600092505b8583101561265c5786600201838154811015156125b157fe5b906000526020600020015491506002600083600019166000191681526020019081526020016000209050600081600401546000191614806125fd57508960001916816004015460001916145b1561264f578060020154858481518110151561261557fe5b9060200190602002019060001916908160001916815250508060030154848481518110151561264057fe5b90602001906020020181815250505b8280600101935050612598565b848498509850505050505050509250929050565b6000806000806000806000808960001916600019168152602001908152602001600020805490501415612736577f867afb65cfcfed43cb0ec1227f3035623350033bdd085d102fa01300680f44207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60405180828152602001806020018281038252600e8152602001807f72756c65732073697a65203d20300000000000000000000000000000000000008152506020019250505060405180910390a1600094506129b5565b600080886000191660001916815260200190815260200160002080549050935060008088600019166000191681526020019081526020016000209250600184019150600090505b838110156127c9578560001916838281548110151561279857fe5b9060005260206000209060060201600101546000191614156127bc578091506127c9565b808060010191505061277d565b8382111561286a577f867afb65cfcfed43cb0ec1227f3035623350033bdd085d102fa01300680f44207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6040518082815260200180602001828103825260138152602001807f6e6f7420666f756e642072756c65206e616d65000000000000000000000000008152506020019250505060405180910390a1600094506129b5565b8190505b6001840381101561292657826001820181548110151561288a57fe5b906000526020600020906006020183828154811015156128a657fe5b90600052602060002090600602016000820154816000019060001916905560018201548160010190600019169055600282015481600201556003820154816003015560048201816004019080546128fe929190612ae0565b506005820181600501908054612915929190612ae0565b50905050808060010191505061286e565b8280546001900390816129399190612c0a565b50826000808960001916600019168152602001908152602001600020908054612963929190612c3c565b507f867afb65cfcfed43cb0ec1227f3035623350033bdd085d102fa01300680f4420600060405180828152602001806020018281038252600081526020016020019250505060405180910390a1600194505b5050505092915050565b608060405190810160405280600081526020016000801916815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054828255906000526020600020908101928215612a43579160200282015b82811115612a42578251829060001916905591602001919060010190612a21565b5b509050612a509190612cf6565b5090565b60a06040519081016040528060008152602001600080191681526020016000801916815260200160008152602001600080191681525090565b828054828255906000526020600020908101928215612acf579160200282015b82811115612ace578251829060001916905591602001919060010190612aad565b5b509050612adc9190612cf6565b5090565b828054828255906000526020600020908101928215612b215760005260206000209182015b82811115612b20578254825591600101919060010190612b05565b5b509050612b2e9190612cf6565b5090565b815481835581811115612b5957818360005260206000209182019101612b589190612cf6565b5b505050565b828054828255906000526020600020908101928215612b9f5760005260206000209182015b82811115612b9e578254825591600101919060010190612b83565b5b509050612bac9190612cf6565b5090565b604080519081016040528060008152602001600080191681525090565b60c0604051908101604052806000801916815260200160008019168152602001600081526020016000815260200160608152602001606081525090565b815481835581811115612c3757600602816006028360005260206000209182019101612c369190612d1b565b5b505050565b828054828255906000526020600020906006028101928215612ce55760005260206000209160060282015b82811115612ce4578282600082015481600001906000191690556001820154816001019060001916905560028201548160020155600382015481600301556004820181600401908054612cbb929190612ae0565b506005820181600501908054612cd2929190612ae0565b50505091600601919060060190612c67565b5b509050612cf29190612d1b565b5090565b612d1891905b80821115612d14576000816000905550600101612cfc565b5090565b90565b612d7791905b80821115612d7357600080820160009055600182016000905560028201600090556003820160009055600482016000612d5a9190612d7a565b600582016000612d6a9190612d7a565b50600601612d21565b5090565b90565b5080546000825590600052602060002090810190612d989190612cf6565b505600a165627a7a72305820d2e48d920d5c85e79fd1e8be26f4d1f8b18cbc04bf05977ee5023f59255086c30029";

    public static final String FUNC_ADDSET = "addSet";

    public static final String FUNC_GETALLRULES = "getAllRules";

    public static final String FUNC_ADDSETNODE = "addSetNode";

    public static final String FUNC_GETAPPIDNODES = "getAppidNodes";

    public static final String FUNC_REMOVESETNODE = "removeSetNode";

    public static final String FUNC_GETNODE = "getNode";

    public static final String FUNC_GETEVIDENCEFACTORYADDR = "getEvidenceFactoryAddr";

    public static final String FUNC_GETSETNODES = "getSetNodes";

    public static final String FUNC_ADDORG = "addOrg";

    public static final String FUNC_GETRULENODES = "getRuleNodes";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_ADDRULE = "addRule";

    public static final String FUNC_UPDATENODE = "updateNode";

    public static final String FUNC_GETNODES = "getNodes";

    public static final String FUNC_DELETERULE = "deleteRule";

    public static final Event ADDORGLOG_EVENT = new Event("addOrgLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ADDRULELOG_EVENT = new Event("addRuleLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event GETSETLOG_EVENT = new Event("getSetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ADDSETLOG_EVENT = new Event("addSetLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event ADDNODELOG_EVENT = new Event("addNodeLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATENODELOG_EVENT = new Event("updateNodeLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVENODELOG_EVENT = new Event("removeNodeLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event ADDSETNODELOG_EVENT = new Event("addSetNodeLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event DELRULELOG_EVENT = new Event("delRuleLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event GETRULELOG_EVENT = new Event("getRuleLog", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
    ;

    @Deprecated
    protected WesignMeshRoute(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected WesignMeshRoute(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WesignMeshRoute(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WesignMeshRoute(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> addSet(byte[] name, List<byte[]> nodeNames, String add) {
        final Function function = new Function(
                FUNC_ADDSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(nodeNames, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(add)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addSet(byte[] name, List<byte[]> nodeNames, String add, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDSET, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(nodeNames, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.Address(add)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple4<List<byte[]>, List<BigInteger>, List<BigInteger>, List<byte[]>>> getAllRules(byte[] appid) {
        final Function function = new Function(FUNC_GETALLRULES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(appid)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple4<List<byte[]>, List<BigInteger>, List<BigInteger>, List<byte[]>>>(
                new Callable<Tuple4<List<byte[]>, List<BigInteger>, List<BigInteger>, List<byte[]>>>() {
                    @Override
                    public Tuple4<List<byte[]>, List<BigInteger>, List<BigInteger>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<List<byte[]>, List<BigInteger>, List<BigInteger>, List<byte[]>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Uint256>) results.get(2).getValue()), 
                                convertToNative((List<Bytes32>) results.get(3).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addSetNode(byte[] setName, byte[] nodeName, byte[] ip, BigInteger channelPort, byte[] org) {
        final Function function = new Function(
                FUNC_ADDSETNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(setName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(nodeName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(ip), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(channelPort), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addSetNode(byte[] setName, byte[] nodeName, byte[] ip, BigInteger channelPort, byte[] org, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDSETNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(setName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(nodeName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(ip), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(channelPort), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple3<List<byte[]>, List<BigInteger>, List<byte[]>>> getAppidNodes(byte[] appid, byte[] org) {
        final Function function = new Function(FUNC_GETAPPIDNODES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(appid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<Tuple3<List<byte[]>, List<BigInteger>, List<byte[]>>>(
                new Callable<Tuple3<List<byte[]>, List<BigInteger>, List<byte[]>>>() {
                    @Override
                    public Tuple3<List<byte[]>, List<BigInteger>, List<byte[]>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<List<byte[]>, List<BigInteger>, List<byte[]>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                convertToNative((List<Bytes32>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> removeSetNode(byte[] setName, byte[] nodeName) {
        final Function function = new Function(
                FUNC_REMOVESETNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(setName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(nodeName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void removeSetNode(byte[] setName, byte[] nodeName, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_REMOVESETNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(setName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(nodeName)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple3<byte[], BigInteger, byte[]>> getNode(byte[] name) {
        final Function function = new Function(FUNC_GETNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple3<byte[], BigInteger, byte[]>>(
                new Callable<Tuple3<byte[], BigInteger, byte[]>>() {
                    @Override
                    public Tuple3<byte[], BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], BigInteger, byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> getEvidenceFactoryAddr(byte[] setName) {
        final Function function = new Function(FUNC_GETEVIDENCEFACTORYADDR, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(setName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<List> getSetNodes(byte[] name) {
        final Function function = new Function(FUNC_GETSETNODES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteCall<List>(
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addOrg(byte[] name) {
        final Function function = new Function(
                FUNC_ADDORG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addOrg(byte[] name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDORG, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<byte[]> getRuleNodes(byte[] appid, BigInteger seq) {
        final Function function = new Function(FUNC_GETRULENODES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(appid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(seq)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> addNode(byte[] name, byte[] ip, BigInteger channelPort, byte[] org) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(ip), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(channelPort), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addNode(byte[] name, byte[] ip, BigInteger channelPort, byte[] org, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(ip), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(channelPort), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> addRule(byte[] appid, byte[] name, BigInteger min, BigInteger max, List<byte[]> orgNames, List<byte[]> setNames) {
        final Function function = new Function(
                FUNC_ADDRULE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(appid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(min), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(max), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(orgNames, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(setNames, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void addRule(byte[] appid, byte[] name, BigInteger min, BigInteger max, List<byte[]> orgNames, List<byte[]> setNames, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_ADDRULE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(appid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(min), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(max), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(orgNames, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.fisco.bcos.web3j.abi.datatypes.DynamicArray<org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32>(
                        Utils.typeMap(setNames, org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<TransactionReceipt> updateNode(byte[] name, byte[] ip, BigInteger channelPort, byte[] org) {
        final Function function = new Function(
                FUNC_UPDATENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(ip), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(channelPort), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void updateNode(byte[] name, byte[] ip, BigInteger channelPort, byte[] org, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_UPDATENODE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(ip), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Uint256(channelPort), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public RemoteCall<Tuple2<List<byte[]>, List<BigInteger>>> getNodes(byte[] setName, byte[] org) {
        final Function function = new Function(FUNC_GETNODES, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(setName), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(org)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteCall<Tuple2<List<byte[]>, List<BigInteger>>>(
                new Callable<Tuple2<List<byte[]>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<byte[]>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<byte[]>, List<BigInteger>>(
                                convertToNative((List<Bytes32>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> deleteRule(byte[] appid, byte[] name) {
        final Function function = new Function(
                FUNC_DELETERULE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(appid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public void deleteRule(byte[] appid, byte[] name, TransactionSucCallback callback) {
        final Function function = new Function(
                FUNC_DELETERULE, 
                Arrays.<Type>asList(new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(appid), 
                new org.fisco.bcos.web3j.abi.datatypes.generated.Bytes32(name)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public List<AddOrgLogEventResponse> getAddOrgLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDORGLOG_EVENT, transactionReceipt);
        ArrayList<AddOrgLogEventResponse> responses = new ArrayList<AddOrgLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddOrgLogEventResponse typedResponse = new AddOrgLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddOrgLogEventResponse> addOrgLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, AddOrgLogEventResponse>() {
            @Override
            public AddOrgLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDORGLOG_EVENT, log);
                AddOrgLogEventResponse typedResponse = new AddOrgLogEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddOrgLogEventResponse> addOrgLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDORGLOG_EVENT));
        return addOrgLogEventFlowable(filter);
    }

    public List<AddRuleLogEventResponse> getAddRuleLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDRULELOG_EVENT, transactionReceipt);
        ArrayList<AddRuleLogEventResponse> responses = new ArrayList<AddRuleLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddRuleLogEventResponse typedResponse = new AddRuleLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddRuleLogEventResponse> addRuleLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, AddRuleLogEventResponse>() {
            @Override
            public AddRuleLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDRULELOG_EVENT, log);
                AddRuleLogEventResponse typedResponse = new AddRuleLogEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddRuleLogEventResponse> addRuleLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDRULELOG_EVENT));
        return addRuleLogEventFlowable(filter);
    }

    public List<GetSetLogEventResponse> getGetSetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GETSETLOG_EVENT, transactionReceipt);
        ArrayList<GetSetLogEventResponse> responses = new ArrayList<GetSetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetSetLogEventResponse typedResponse = new GetSetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.name = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GetSetLogEventResponse> getSetLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, GetSetLogEventResponse>() {
            @Override
            public GetSetLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GETSETLOG_EVENT, log);
                GetSetLogEventResponse typedResponse = new GetSetLogEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.name = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GetSetLogEventResponse> getSetLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GETSETLOG_EVENT));
        return getSetLogEventFlowable(filter);
    }

    public List<AddSetLogEventResponse> getAddSetLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDSETLOG_EVENT, transactionReceipt);
        ArrayList<AddSetLogEventResponse> responses = new ArrayList<AddSetLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddSetLogEventResponse typedResponse = new AddSetLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddSetLogEventResponse> addSetLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, AddSetLogEventResponse>() {
            @Override
            public AddSetLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDSETLOG_EVENT, log);
                AddSetLogEventResponse typedResponse = new AddSetLogEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddSetLogEventResponse> addSetLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDSETLOG_EVENT));
        return addSetLogEventFlowable(filter);
    }

    public List<AddNodeLogEventResponse> getAddNodeLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDNODELOG_EVENT, transactionReceipt);
        ArrayList<AddNodeLogEventResponse> responses = new ArrayList<AddNodeLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddNodeLogEventResponse typedResponse = new AddNodeLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddNodeLogEventResponse> addNodeLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, AddNodeLogEventResponse>() {
            @Override
            public AddNodeLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDNODELOG_EVENT, log);
                AddNodeLogEventResponse typedResponse = new AddNodeLogEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddNodeLogEventResponse> addNodeLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDNODELOG_EVENT));
        return addNodeLogEventFlowable(filter);
    }

    public List<UpdateNodeLogEventResponse> getUpdateNodeLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATENODELOG_EVENT, transactionReceipt);
        ArrayList<UpdateNodeLogEventResponse> responses = new ArrayList<UpdateNodeLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateNodeLogEventResponse typedResponse = new UpdateNodeLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateNodeLogEventResponse> updateNodeLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, UpdateNodeLogEventResponse>() {
            @Override
            public UpdateNodeLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATENODELOG_EVENT, log);
                UpdateNodeLogEventResponse typedResponse = new UpdateNodeLogEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateNodeLogEventResponse> updateNodeLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATENODELOG_EVENT));
        return updateNodeLogEventFlowable(filter);
    }

    public List<RemoveNodeLogEventResponse> getRemoveNodeLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVENODELOG_EVENT, transactionReceipt);
        ArrayList<RemoveNodeLogEventResponse> responses = new ArrayList<RemoveNodeLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveNodeLogEventResponse typedResponse = new RemoveNodeLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RemoveNodeLogEventResponse> removeNodeLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, RemoveNodeLogEventResponse>() {
            @Override
            public RemoveNodeLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REMOVENODELOG_EVENT, log);
                RemoveNodeLogEventResponse typedResponse = new RemoveNodeLogEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RemoveNodeLogEventResponse> removeNodeLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REMOVENODELOG_EVENT));
        return removeNodeLogEventFlowable(filter);
    }

    public List<AddSetNodeLogEventResponse> getAddSetNodeLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDSETNODELOG_EVENT, transactionReceipt);
        ArrayList<AddSetNodeLogEventResponse> responses = new ArrayList<AddSetNodeLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddSetNodeLogEventResponse typedResponse = new AddSetNodeLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddSetNodeLogEventResponse> addSetNodeLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, AddSetNodeLogEventResponse>() {
            @Override
            public AddSetNodeLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDSETNODELOG_EVENT, log);
                AddSetNodeLogEventResponse typedResponse = new AddSetNodeLogEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddSetNodeLogEventResponse> addSetNodeLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDSETNODELOG_EVENT));
        return addSetNodeLogEventFlowable(filter);
    }

    public List<DelRuleLogEventResponse> getDelRuleLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DELRULELOG_EVENT, transactionReceipt);
        ArrayList<DelRuleLogEventResponse> responses = new ArrayList<DelRuleLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DelRuleLogEventResponse typedResponse = new DelRuleLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DelRuleLogEventResponse> delRuleLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, DelRuleLogEventResponse>() {
            @Override
            public DelRuleLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DELRULELOG_EVENT, log);
                DelRuleLogEventResponse typedResponse = new DelRuleLogEventResponse();
                typedResponse.log = log;
                typedResponse.code = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DelRuleLogEventResponse> delRuleLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DELRULELOG_EVENT));
        return delRuleLogEventFlowable(filter);
    }

    public List<GetRuleLogEventResponse> getGetRuleLogEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GETRULELOG_EVENT, transactionReceipt);
        ArrayList<GetRuleLogEventResponse> responses = new ArrayList<GetRuleLogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GetRuleLogEventResponse typedResponse = new GetRuleLogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.appid = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GetRuleLogEventResponse> getRuleLogEventFlowable(BcosFilter filter) {
        return web3j.logFlowable(filter).map(new io.reactivex.functions.Function<Log, GetRuleLogEventResponse>() {
            @Override
            public GetRuleLogEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GETRULELOG_EVENT, log);
                GetRuleLogEventResponse typedResponse = new GetRuleLogEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.appid = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<GetRuleLogEventResponse> getRuleLogEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        BcosFilter filter = new BcosFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GETRULELOG_EVENT));
        return getRuleLogEventFlowable(filter);
    }

    @Deprecated
    public static WesignMeshRoute load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new WesignMeshRoute(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static WesignMeshRoute load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new WesignMeshRoute(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static WesignMeshRoute load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WesignMeshRoute(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WesignMeshRoute load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WesignMeshRoute(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WesignMeshRoute> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WesignMeshRoute.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WesignMeshRoute> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WesignMeshRoute.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<WesignMeshRoute> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(WesignMeshRoute.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<WesignMeshRoute> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(WesignMeshRoute.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class AddOrgLogEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class AddRuleLogEventResponse {
        public Log log;

        public BigInteger code;
    }

    public static class GetSetLogEventResponse {
        public Log log;

        public BigInteger code;

        public BigInteger id;

        public byte[] name;
    }

    public static class AddSetLogEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class AddNodeLogEventResponse {
        public Log log;

        public BigInteger id;
    }

    public static class UpdateNodeLogEventResponse {
        public Log log;

        public BigInteger code;
    }

    public static class RemoveNodeLogEventResponse {
        public Log log;

        public BigInteger code;
    }

    public static class AddSetNodeLogEventResponse {
        public Log log;

        public BigInteger code;
    }

    public static class DelRuleLogEventResponse {
        public Log log;

        public BigInteger code;

        public String msg;
    }

    public static class GetRuleLogEventResponse {
        public Log log;

        public BigInteger id;

        public byte[] appid;
    }
}
